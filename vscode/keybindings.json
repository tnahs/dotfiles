[
    // macOS -------------------------------------------------------------------
    //
    // Unbind `cmd+q` and rebind to `cmd+q cmd+q` to prevent unwanted quitting.
    {
        "key": "cmd+q",
        "command": "-workbench.action.quit"
    },
    {
        "key": "cmd+q cmd+q",
        "command": "workbench.action.quit"
    },
    //
    // OS Specific -------------------------------------------------------------
    // Use `cmd` for macOS and `alt` for Linux.
    //
    // Open the `settings.json` file.
    {
        "key": "cmd+,",
        "command": "workbench.action.openSettings",
    },
    // Create a new file.
    {
        "key": "cmd+n",
        "command": "workbench.action.files.newUntitledFile",
    },
    // Save the current editor.
    {
        "key": "cmd+s",
        "command": "workbench.action.files.save",
    },
    // Close the current editor.
    {
        "key": "cmd+w",
        "command": "workbench.action.closeActiveEditor",
    },
    // Re-open the last closed editor.
    {
        "key": "cmd+shift+t",
        "command": "workbench.action.reopenClosedEditor",
    },
    // Open the `Command Palette` in command (>) mode.
    {
        "key": "cmd+shift+p",
        "command": "workbench.action.showCommands",
    },
    // Open the `Command Palette` in file mode.
    {
        "key": "cmd+p",
        "command": "workbench.action.quickOpen",
    },
    // Open the `Command Palette` in symbol (@) mode.
    {
        "key": "cmd+p",
        "command": "workbench.action.quickOpen",
    },
    // Add selection to next find match.
    {
        "key": "cmd+d",
        "command": "editor.action.addSelectionToNextFindMatch",
    },
    // Move last selection to next find match.
    {
        "key": "cmd+m",
        "command": "editor.action.moveSelectionToNextFindMatch",
    },
    // Undo last cursor operation.
    {
        "key": "cmd+u",
        "command": "cursorUndo",
    },
    //
    // `Quick Fix` -------------------------------------------------------------
    // Install `pascalsenn.keyboard-quickfix` to navigate the `QuickFix` menu.
    //
    // Open the `Quick Fix` menu.
    {
        "key": "cmd+.",
        "command": "keyboard-quickfix.openQuickFix",
    },
    // Navigate the `Quick Fix` menu with `ctrl` + `jk`.
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    // Navigate the `Quick Fix` menu with `tab` and `shift+tab`.
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    //
    // General -----------------------------------------------------------------
    //
    // Reveal definition.
    {
        "key": "ctrl+g",
        "command": "editor.action.revealDefinition",
    },
    // Show next problem.
    {
        "key": "ctrl+p",
        "command": "editor.action.marker.next",
    },
    // Rename symbol.
    {
        "key": "ctrl+a",
        "command": "editor.action.rename",
        "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    // Toggle the Minimap.
    {
        "key": "ctrl+c m",
        "command": "editor.action.toggleMinimap"
    },
    // Toggle the sidebar.
    {
        "key": "ctrl+b",
        "command": "workbench.action.toggleSidebarVisibility",
    },
    // Move focus to the sidebar.
    {
        "key": "ctrl+escape",
        "command": "workbench.action.focusSideBar",
        "when": "!sidebarFocus"
    },
    // Move focus to the editor.
    {
        "key": "ctrl+escape",
        "command": "workbench.action.focusActiveEditorGroup",
        "when": "!editorFocus"
    },
    // Open `Quick Open View`.
    {
        "key": "ctrl+q",
        "command": "workbench.action.quickOpenView",
    },
    // Navigate the `Command Palette` with `tab` and `shift+tab`.
    {
        "key": "tab",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        // Oddly this does not work.
        "key": "shift+tab",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    // Navigate the `Command Palette` with `ctrl` + `jk`.
    {
        "key": "ctrl+j",
        "command": "workbench.action.quickOpenSelectNext",
        "when": "inQuickOpen"
    },
    {
        "key": "ctrl+k",
        "command": "workbench.action.quickOpenSelectPrevious",
        "when": "inQuickOpen"
    },
    // Split editor to the right.
    {
        "key": "ctrl+t",
        "command": "workbench.action.splitEditorRight",
    },
    // Navigate editor groups with `ctrl` + `hl`.
    {
        "key": "ctrl+h",
        "command": "workbench.action.focusLeftGroup",
    },
    {
        "key": "ctrl+l",
        "command": "workbench.action.focusRightGroup",
    },
    // Move editors between editor groups with `ctrl+shift` + `hl`.
    {
        "key": "ctrl+shift+h",
        "command": "workbench.action.moveEditorToPreviousGroup",
    },
    {
        "key": "ctrl+shift+l",
        "command": "workbench.action.moveEditorToNextGroup",
    },
    // Trigger code suggesions.
    {
        "key": "ctrl+s",
        "command": "editor.action.triggerSuggest",
    },
    // Navigate code suggestions with `tab` and `shift+tab`.
    {
        "key": "tab",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "shift+tab",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetVisible"
    },
    // Navigate code suggestions with `ctrl` + `jk`.
    {
        "key": "ctrl+j",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetVisible"
    },
    {
        "key": "ctrl+k",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetVisible"
    },
    // Navigate the `File Explorer` with `hjkl`.
    {
        "key": "ctrl+h",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+j",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+k",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
    },
    {
        "key": "ctrl+l",
        "command": "list.expand",
        "when": "listFocus && !inputFocus"
    },
    // Create a new file in the `File Explorer`.
    {
        "key": "i",
        "command": "explorer.newFile",
        "when": "listFocus && !inputFocus"
    },
    // Create a new folder in the `File Explorer`.
    {
        "key": "o",
        "command": "explorer.newFolder",
        "when": "listFocus && !inputFocus"
    },
    // Rename file/folder in the `File Explorer`.
    {
        "key": "r",
        "command": "renameFile",
        "when": "listFocus && !inputFocus"
    },
    // Reveal current file in the `File Explorer`.
    {
        "key": "ctrl+x",
        "command": "revealInExplorer",
    },
    //
    // ------------------------------------------------------------------------
    // Rust
    {
        "key": "ctrl+c h",
        "command": "rust-analyzer.toggleInlayHints"
    },
]
