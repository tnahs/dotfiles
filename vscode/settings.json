{
    // Customize UI
    "window.titleBarStyle": "native",
    "customizeUI.titleBar": "frameless",
    "customizeUI.font.regular": "JetBrains Mono",
    "customizeUI.stylesheet": {
        ".editor-actions": "display: none !important",
        ".title-actions": "display: none !important",
    },
    "editor.fontFamily": "JetBrains Mono",
    "editor.fontLigatures": true,
    "editor.fontSize": 14,
    "editor.lightbulb.enabled": false,
    "editor.minimap.renderCharacters": false,
    "editor.minimap.scale": 2,
    "editor.minimap.showSlider": "always",
    "editor.renderControlCharacters": false,
    "editor.renderLineHighlight": "all",
    "editor.renderWhitespace": "boundary",
    "editor.rulers": [
        80,
        100,
    ],
    "editor.semanticTokenColorCustomizations": {
        "enabled": true
    },
    "editor.suggestSelection": "recentlyUsedByPrefix",
    "editor.wordWrap": "on",
    "editor.wordWrapColumn": 99,
    "explorer.compactFolders": false,
    "terminal.integrated.fontFamily": "JetBrains Mono",
    "terminal.integrated.fontSize": 14,
    "window.restoreWindows": "none",
    "window.zoomLevel": 1,
    "workbench.activityBar.visible": false,
    "workbench.iconTheme": null,
    "workbench.settings.editor": "json",
    "workbench.startupEditor": "none",
    "workbench.colorCustomizations": {
        "scrollbar.shadow": "#ffffff00",
        "widget.shadow": "#ffffff00",
    },
    "workbench.colorTheme": "Ayu Mirage",
    //
    // Files
    "files.associations": {
        "*.aliases": "shellscript",
        "*.functions": "shellscript",
        "*.coveragerc": "ini",
    },
    "files.exclude": {
        "**/*.pyc": true,
        "**/__pycache__": true,
        "**/.mypy_cache": true,
        "**/node_modules": true
    },
    "files.trimTrailingWhitespace": true,
    "files.trimFinalNewlines": true,
    //
    // Emmet
    "emmet.includeLanguages": {
        "markdown": "md",
        "jinja-css": "css",
        "jinja-html": "html",
    },
    //
    // -------------------------------------------------------------------------
    // Vim
    // https://github.com/VSCodeVim/Vim
    // https://vim.rtorr.com/
    //
    // Movement
    //
    // 0           move cursor to the start of the line
    // ^           move cursor to the first non-blank character of the line
    // $           move cursor to the end of the line
    // gg          move cursor to the first line of the document
    // G           move cursor to the last line of the document
    // H           move cursor to top of screen
    // M           move cursor to middle of screen
    // L           move cursor to bottom of screen
    // w           move cursor to the start of a word
    // e           move cursor to the send of a word
    // b           move cursor to the sthe start of a word
    // zz          center cursor on screen
    // ctrl + e    move screen down one line (without moving cursor)
    // ctrl + y    move screen up one line (without moving cursor)
    // ctrl + b    move back one full screen
    // ctrl + f    move forward one full screen
    // ctrl + d    move forward 1/2 a screen
    // ctrl + u    move back 1/2 a screen
    // %           move between matching braces
    //
    // Editing
    //
    // i     insert before the cursor
    // I     insert at the beginning of the line
    // a     insert (append) after the cursor
    // A     insert (append) at the end of the line
    // o     append (open) a new line below the current line
    // O     append (open) a new line above the current line
    // cc    change (replace) entire line
    // C     change (replace) to the end of the line
    // dd    delete (cut) a line
    // D     delete (cut) to the end of the line
    // d$    delete (cut) to the end of the line
    // yy    yank (copy) a line
    // y$    yank (copy) to end of line
    // p     paste fter cursor
    // P     paste before cursor
    // x     delete (cut) character
    // r     replace a single character
    //
    // Visual Mode
    //
    // v    start visual mode
    // V    start linewise visual mode
    // o    move to other end of marked area
    // O    move to other corner of block
    // y    yank (copy) marked text
    // d    delete marked text
    // ~    switch case
    // u    change marked text to lowercase
    // U    change marked text to uppercase
    //
    // VSCode Bonuses
    //
    // gb    add cursor at identical occurances
    // gd    jump to definition
    // gq    reflow and wordwrap blocks of text
    // af    in VISUAL mode - select increasingly large blocks of text
    // gh    show hover tooltip
    //
    // gcc                comment single line
    // /<query><enter>    search for <query>
    // n                  move to next match
    // N                  move to previous match
    //
    // Composistion Examples
    //
    // vi"           <action> inside <char>      visual select inside "
    // va"           <action> all with <char>    visual select all with "
    // vt"           <action> until <char>       visual select until "
    // vw [...w]                                 visual select word [...word]
    //
    // dw       delete (cut) remainder of word (until non-character)
    // cw       change (replace) remainder of word (until non-character)
    // viW      select all non-whitespace characters under the cursor
    // viWS"    surround all non-whitepsace characters under the cursor with "
    // vg_      visual select from the cursor to the end of the line
    // vg_S"    surround all characters from the cursor to the end of the line with "
    //
    "editor.autoClosingBrackets": "beforeWhitespace",
    "editor.autoClosingQuotes": "beforeWhitespace",
    "editor.lineNumbers": "relative",
    "vim.leader": " ",
    "vim.useSystemClipboard": true,
    "vim.textwidth": 80,
    "vim.highlightedyank.enable": true,
    "vim.highlightedyank.color": "#ffffffff",
    "vim.surround": true,
    "vim.camelCaseMotion.enable": true,
    "vim.easymotion": true, // <leader><leader>s
    "vim.normalModeKeyBindingsNonRecursive": [
        // Cycle through open tabs.
        {
            "before": [
                "<leader>",
                "<tab>"
            ],
            "commands": [
                "workbench.action.nextEditor"
            ]
        },
        // Add cursors with `ctrl` + `jk`.
        {
            "before": [
                "<C-j>",
            ],
            "commands": [
                "editor.action.insertCursorBelow"
            ]
        },
        {
            "before": [
                "<C-k>",
            ],
            "commands": [
                "editor.action.insertCursorAbove"
            ]
        },
        // Move screen up 5 lines instead of 1 and center the cursor.
        {
            "before": [
                "<C-y>"
            ],
            "after": [
                "5",
                "<C-y>",
                "M"
            ],
        },
        // Move screen down 5 lines instead of 1 and center the cursor.
        {
            "before": [
                "<C-e>"
            ],
            "after": [
                "5",
                "<C-e>",
                "M"
            ],
        },
    ],
    "vim.visualModeKeyBindingsNonRecursive": [
        // Move screen up 5 lines instead of 1 and center the cursor.
        {
            "before": [
                "<C-y>"
            ],
            "after": [
                "5",
                "<C-y>",
                "M"
            ],
        },
        // Move screen down 5 lines instead of 1 and center the cursor.
        {
            "before": [
                "<C-e>"
            ],
            "after": [
                "5",
                "<C-e>",
                "M"
            ],
        },
        // Indent selected block with `tab`.
        {
            "before": [
                "<tab>"
            ],
            "commands": [
                "tab" // Or: >gv
            ]
        },
        // Outdent selected block with `shift+tab`.
        {
            "before": [
                "<S-tab>"
            ],
            "commands": [
                "outdent" // Or: <gv
            ]
        },
    ],
    //
    // -------------------------------------------------------------------------
    // Rust
    //
    "[rust]": {
        "editor.formatOnSave": true,
    },
    "rust-analyzer.checkOnSave.command": "clippy",
    "rust-analyzer.checkOnSave.enable": true,
    "rust-analyzer.inlayHints.enable": true,
    "rust-analyzer.inlayHints.smallerHints": false,
    "rust-analyzer.lens.enable": false,
    //
    // -------------------------------------------------------------------------
    // Python
    //
    // -- Formatting
    "[python]": {
        "editor.codeActionsOnSave": {
            "source.organizeImports": true
        },
        "editor.detectIndentation": false,
        "editor.formatOnSave": true,
        "editor.insertSpaces": true,
        "editor.tabSize": 4,
    },
    "python.formatting.blackPath": "~/.local/bin/black",
    "python.formatting.provider": "black",
    "python.sortImports.args": [
        "--profile=black",
        "--lines-after-imports=2"
    ],
    // -- Linting - Pylance
    "python.languageServer": "Pylance",
    "python.analysis.diagnosticMode": "workspace",
    "python.analysis.typeCheckingMode": "basic",
    // -- Linting - Flake8
    "python.linting.enabled": true,
    "python.linting.flake8Args": [
        "--ignore=E501,E231,W503,E402,E128,E711,E131,E126,E241,T499,E741"
    ],
    "python.linting.flake8Enabled": true,
    "python.linting.flake8Path": "~/.local/bin/flake8",
    //
    // -------------------------------------------------------------------------
    // JSON
    //
    "[json]": {
        "editor.defaultFormatter": "vscode.json-language-features",
        "editor.detectIndentation": false,
        "editor.insertSpaces": true,
        "editor.tabSize": 4,
    },
    "[jsonc]": {
        "editor.defaultFormatter": "vscode.json-language-features",
        "editor.detectIndentation": false,
        "editor.insertSpaces": true,
        "editor.tabSize": 4,
    },
    //
    // -------------------------------------------------------------------------
    // YAML
    //
    "[yaml]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.detectIndentation": false,
        "editor.insertSpaces": true,
        "editor.tabSize": 2,
    },
    //
    // -------------------------------------------------------------------------
    // Markdown
    //
    "markdownlint.config": {
        "MD007": {
            "indent": 4,
        },
        "MD018": false,
        "MD014": false,
        "MD024": false,
        "MD026": false,
        "MD033": false,
        "MD041": false,
        "MD046": false,
    },
    "[markdown]": {
        "editor.codeActionsOnSave": {
            "source.fixAll.markdownlint": true
        },
        "editor.defaultFormatter": "esbenp.prettier-vscode",
        "editor.detectIndentation": false,
        "editor.insertSpaces": true,
        "editor.quickSuggestions": true,
        "editor.suggest.showSnippets": false,
        "editor.tabSize": 4,
        "editor.wordBasedSuggestions": false,
        "files.trimTrailingWhitespace": false,
    },
    //
    // -------------------------------------------------------------------------
    // HTML/CSS/Javascript
    //
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "css.lint.emptyRules": "ignore",
    "[css]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
    },
    "scss.lint.emptyRules": "ignore",
    "[scss]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
    },
    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
    },
    "[typescript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode",
    },
    //
    // -------------------------------------------------------------------------
    // Extenstions
    "cSpell.enabled": false,
    "gitlens.codeLens.enabled": false,
    "gitlens.menus": false,
    "todo-tree.filtering.useBuiltInExcludes": "file and search excludes",
    "todo-tree.filtering.excludeGlobs": [
        "**/temp/**",
        "**/tmp/**",
        "TODO.*",
        "Cargo.toml",
    ],
    "todo-tree.general.tags": [
        "BUG",
        "FIXME",
        "NOTE",
        "TEMP",
        "TODO",
        "WIP",
    ],
    "todo-tree.regex.regex": "(?<!\\w)($TAGS)(?!\\w)",
    "todo-tree.ripgrep.ripgrepArgs": "--pcre2",
    "todo-tree.highlights.defaultHighlight": {
        "type": "tag",
        "foreground": "#ffffff",
        "background": "#ffffff40",
        "icon": "dot-fill",
        "gutterIcon": true,
    },
    "todo-tree.highlights.customHighlight": {
        "BUG": {
            "foreground": "#ffefc4",
            "background": "#c99025",
            "iconColour": "#ffa600",
            "icon": "dot-fill",
        },
        "FIXME": {
            "foreground": "#ffaae0",
            "background": "#a52175",
            "iconColour": "#ff00a2",
            "icon": "dot-fill",
        },
        "TEMP": {
            "foreground": "#b6e4ff",
            "background": "#145488",
            "iconColour": "#008cff",
        },
        "TODO": {
            "foreground": "#00f6c8",
            "background": "#115246",
            "iconColour": "#00ffd0",
        },
        "WIP": {
            "foreground": "#bda7ff",
            "background": "#5b16c2",
            "iconColour": "#6600ff",
        },
    },
    //
    // -------------------------------------------------------------------------
    // Misc
    "security.workspace.trust.enabled": false,
    "breadcrumbs.enabled": false,
    "editor.minimap.enabled": false,
}
